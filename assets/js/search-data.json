{
  
    
        "post0": {
            "title": "test post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . Front Matter is a markdown cell at the beginning of your notebook that allows you to inject metadata into your notebook. For example: . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . genres . [&#39;Action&#39;, &#39;Adventure&#39;, &#39;Black Comedy&#39;, &#39;Comedy&#39;, &#39;Concert/Performance&#39;, &#39;Documentary&#39;, &#39;Drama&#39;, &#39;Horror&#39;, &#39;Musical&#39;, &#39;Romantic Comedy&#39;, &#39;Thriller/Suspense&#39;, &#39;Western&#39;] . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . gmovies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks just like you can with markdown. . For example, here is a footnote 1. . . This is the footnote.&#8617; . |",
            "url": "https://alexfrid.github.io/DataStoryDesign/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Converting an Alteryx tool into a Python function",
            "content": "A while ago I was doing some fuzzy matching and tried out a challenge to convert the typical fuzzy matching process in Alteryx into a pythonic way of doing it. . While I didn’t end up completing it, I was quite happy that I was able to complete one of the tools, the Alteryx make group tool. . . While I had used it several times in Alteryx, I didn’t really know how it worked. Well.. I knew the make group tool makes groups! Obviously :) . But how does it actually do it? . In situations like this I find the best place to start is reading the documentation, which in Alteryx’s case its best at look at the tool examples found here: . . After opening the example, we’re greeted with this very helpful explanation: . . From looking closely at this we can deduce that the make group tool is actually doing a few things: . Looking at each row and seeing all the possible connections (Luke is connected to Obi, Jabba is connected to Boba and so forth). . | Based on those connections it then makes a network graph where the nodes are a unique list of each person and the edges are the relationships between each person. . | Then establishing that there are two groups. . | Finally, a group name is selected and a dataframe is outputted with two columns. A column for the group name and a column for the person. . | Having understood the logic of what the tool is doing, its time to convert that logic into Python code. . Hopefully, the code is commented enough so you can understand what its doing, otherwise let me know ;) . &quot;&quot;&quot;Replicates the make group tool in Alteryx&quot;&quot;&quot; # Import necessary modules import networkx as nx import pandas as pd from itertools import repeat from networkx.algorithms import community def makegroups(df): &quot;&quot;&quot; Replicates the functionality of the make group tool in Alteryx Expects a pandas dataframe (&quot;df&quot;) with two columns. &quot;&quot;&quot; try: # Renames df columns df.columns = [&#39;a&#39;, &#39;b&#39;] # Converting the df to a list for network edges edgesList = df.values.tolist() # Converting the df to a dictionary for network nodes nodeDict = df.to_dict(&#39;list&#39;) # Creating an empty graph G = nx.Graph() # Adding nodes from both lists in the dictionary # Effectively a merge of the two lists G.add_nodes_from(nodeDict[&#39;a&#39;]) G.add_nodes_from(nodeDict[&#39;b&#39;]) # Adding the edges from the edges list G.add_edges_from(edgesList) # Generates groups # TODO check that size of smallest clique, here 2 is dynamic comm = list(community.k_clique_communities(G, 2)) # Splits the communities into two lists comm1 = list(comm[0]) comm2 = list(comm[1]) # Generates list of the group name # Replicates the group name to match community list length group1 = list(repeat(comm1[0], len(comm1))) group2 = list(repeat(comm2[0], len(comm2))) # combines each group name and community list into a dataframe dfGroup1 = pd.DataFrame(list(zip(group1, comm1)), columns=[&#39;Group&#39;, &#39;key&#39;]) dfGroup2 = pd.DataFrame(list(zip(group2, comm2)), columns=[&#39;Group&#39;, &#39;key&#39;]) # Combines both dataframes into the final dataframe df = dfGroup1.append(dfGroup2, ignore_index=True) print(&quot;Success: Groups created&quot;) return df except Exception as e: print(&quot;Error: Function - makegroups:&quot;, e) . Now we can call the function and get the groups . makegroups(df) . . You can find the Python file and a notebook file at: https://github.com/AlexFrid/MakeGroup .",
            "url": "https://alexfrid.github.io/DataStoryDesign/alteryx/python/2020/02/01/alteryx-to-python.html",
            "relUrl": "/alteryx/python/2020/02/01/alteryx-to-python.html",
            "date": " • Feb 1, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Finished is better than perfect",
            "content": "I have a problem with procrastination. More specifically, I have a problem with procrastination in my personal life. Which I find quite frustrating because I’m generally on top of things at work. . Because of that, I’ve told myself for a long time that I actually don’t have a problem with procrastination, I just don’t have time right now, I’m tired or whatever else. . Sometimes that is actually true, but after taking time this summer and Christmas holiday just to reflect about my life goals and what I actually want to do, I realized I have a big problem with procrastination. Take this blog for example, I’ve been meaning to get this site up and running since I bought the domain in the fall of 2018! . What eventually got me to write this blog post was a newsletter from James Clear called “3 ideas, 2 quotes, 1 question”, which I highly recommend you check out. . The August 29, 2019 newsletter talked about making the most of your life and had this idea which blew my mind: . “You know yourself mostly by your thoughts. Everyone else in the world knows you only by your actions. Remember this when you feel misunderstood. You have to do or say something for others to know how you feel.” . This really got me thinking about sharing more. Sharing more of my thoughts, what I’m learning and projects I’m doing. To do that however, I need to overcome my problem with procrastination. . Practically what that means is implementing the ideas from two books I bought last year: . Atomic Habits | I listened to this through audible this summer, it has great practical content, I just need to put it into practice. . The End of Procrastination | Funnily enough, this book has been sitting on my desk for a few months now and I’ve just read the first chapter, now its time to stop procrastinating on reading a book about how to stop procrastinating! :) . What does this all mean for you? . This means you can expect to see a lot more from me as I write about things I’m learning and projects I’m working on. . To start with, I’m adopting a new motto to help me overcome some perfectionistic tendencies: finished is better than perfect! .",
            "url": "https://alexfrid.github.io/DataStoryDesign/story/2020/01/18/finished-is-better-than-perfect.html",
            "relUrl": "/story/2020/01/18/finished-is-better-than-perfect.html",
            "date": " • Jan 18, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "Hi, I’m Alexander, an infinitely curious guy who’s sharing lessons learned, projects built and other reflections on this website. .",
          "url": "https://alexfrid.github.io/DataStoryDesign/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}