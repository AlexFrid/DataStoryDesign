<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://alexfrid.github.io/DataStoryDesign/feed.xml" rel="self" type="application/atom+xml" /><link href="https://alexfrid.github.io/DataStoryDesign/" rel="alternate" type="text/html" /><updated>2020-03-07T14:11:34-06:00</updated><id>https://alexfrid.github.io/DataStoryDesign/feed.xml</id><title type="html">Data Story Design</title><subtitle>© 2020 Data Story Design</subtitle><entry><title type="html">Converting an Alteryx tool into a Python function</title><link href="https://alexfrid.github.io/DataStoryDesign/alteryx/python/2020/02/01/alteryx-to-python.html" rel="alternate" type="text/html" title="Converting an Alteryx tool into a Python function" /><published>2020-02-01T00:00:00-06:00</published><updated>2020-02-01T00:00:00-06:00</updated><id>https://alexfrid.github.io/DataStoryDesign/alteryx/python/2020/02/01/alteryx-to-python</id><content type="html" xml:base="https://alexfrid.github.io/DataStoryDesign/alteryx/python/2020/02/01/alteryx-to-python.html">&lt;p&gt;A while ago I was doing some fuzzy matching and tried out a challenge to convert the typical fuzzy matching process
in Alteryx into a pythonic way of doing it.&lt;/p&gt;

&lt;p&gt;While I didn’t end up completing it, 
I was quite happy that I was able to complete one of the tools, 
the Alteryx make group tool.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/DataStoryDesign/images/post_images/makegroup.jpg&quot; alt=&quot;Make Group&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While I had used it several times in Alteryx, I didn’t really know how it worked.
Well.. I knew the make group tool makes groups! Obviously :)&lt;/p&gt;

&lt;p&gt;But how does it actually do it?&lt;/p&gt;

&lt;p&gt;In situations like this I find the best place to start is reading the 
documentation, which in Alteryx’s case its best at look at the tool examples
found here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/DataStoryDesign/images/post_images/make-groups-example-menu.PNG&quot; alt=&quot;Make Group example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After opening the example, we’re greeted with this very helpful explanation:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/DataStoryDesign/images/post_images/make-groups-explanation.PNG&quot; alt=&quot;Make Group explanation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From looking closely at this we can deduce that the make group tool
is actually doing a few things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Looking at each row and seeing all the possible connections
(Luke is connected to Obi, Jabba is connected to Boba and so forth).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Based on those connections it then makes a network graph where the
nodes are a unique list of each person and the edges are the
relationships between each person.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then establishing that there are two groups.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, a group name is selected and a dataframe is outputted with two columns.
A column for the group name and a column for the person.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Having understood the logic of what the tool is doing, its time to convert that
logic into Python code.&lt;/p&gt;

&lt;p&gt;Hopefully, the code is commented enough so you can understand what its doing,
otherwise let me know ;)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Replicates the make group tool in Alteryx&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Import necessary modules
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;networkx&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;networkx.algorithms&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;community&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makegroups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    Replicates the functionality of the make group tool in Alteryx
    Expects a pandas dataframe (&quot;df&quot;) with two columns.
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Renames df columns
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Converting the df to a list for network edges
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;edgesList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tolist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Converting the df to a dictionary for network nodes
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;nodeDict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'list'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Creating an empty graph
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Adding nodes from both lists in the dictionary
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# Effectively a merge of the two lists
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_nodes_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodeDict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_nodes_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodeDict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Adding the edges from the edges list
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_edges_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edgesList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Generates groups
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# TODO check that size of smallest clique, here 2 is dynamic
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;comm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;community&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k_clique_communities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Splits the communities into two lists
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;comm1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;comm2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Generates list of the group name
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# Replicates the group name to match community list length
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;group1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comm1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comm1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;group2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comm2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comm2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# combines each group name and community list into a dataframe
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;dfGroup1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comm1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Group'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'key'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dfGroup2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comm2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Group'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'key'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Combines both dataframes into the final dataframe
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dfGroup1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dfGroup2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignore_index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Success: Groups created&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error: Function - makegroups:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can call the function and get the groups&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;makegroups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/DataStoryDesign/images/post_images/mg-python.png&quot; alt=&quot;Make Group Python&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can find the Python file and a notebook file at:
&lt;a href=&quot;https://github.com/AlexFrid/MakeGroup&quot;&gt;https://github.com/AlexFrid/MakeGroup&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">A while ago I was doing some fuzzy matching and tried out a challenge to convert the typical fuzzy matching process in Alteryx into a pythonic way of doing it.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://alexfrid.github.io/DataStoryDesign/images/header_images/alteryx-to-python.png" /><media:content medium="image" url="https://alexfrid.github.io/DataStoryDesign/images/header_images/alteryx-to-python.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Finished is better than perfect</title><link href="https://alexfrid.github.io/DataStoryDesign/story/2020/01/18/finished-is-better-than-perfect.html" rel="alternate" type="text/html" title="Finished is better than perfect" /><published>2020-01-18T00:00:00-06:00</published><updated>2020-01-18T00:00:00-06:00</updated><id>https://alexfrid.github.io/DataStoryDesign/story/2020/01/18/finished-is-better-than-perfect</id><content type="html" xml:base="https://alexfrid.github.io/DataStoryDesign/story/2020/01/18/finished-is-better-than-perfect.html">&lt;p&gt;I have a problem with procrastination. 
More specifically, I have a problem with procrastination in my personal life.
Which I find quite frustrating because I’m generally on top of things at work.&lt;/p&gt;

&lt;p&gt;Because of that, I’ve told myself for a long time that I actually don’t have a problem
with procrastination, I just don’t have time right now, I’m tired or whatever else.&lt;/p&gt;

&lt;p&gt;Sometimes that is actually true, but after taking time this summer and Christmas holiday just to reflect 
about my life goals and what I actually want to do, I realized I have a big problem with procrastination.
Take this blog for example, I’ve been meaning to get this site up and running since I bought the domain in the fall of 2018!&lt;/p&gt;

&lt;p&gt;What eventually got me to write this blog post was a newsletter from James Clear called “&lt;a href=&quot;https://jamesclear.com/3-2-1&quot;&gt;3 ideas, 2 quotes, 1 question&lt;/a&gt;”,
which I highly recommend you check out.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://jamesclear.com/3-2-1/august-29-2019&quot;&gt;August 29, 2019 newsletter&lt;/a&gt; talked about making the most of your life
and had this idea which blew my mind:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“You know yourself mostly by your thoughts.
Everyone else in the world knows you only by your actions.
Remember this when you feel misunderstood. You have to do or say something for others to know how you feel.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This really got me thinking about sharing more. Sharing more of my thoughts, what I’m learning and projects I’m doing.
To do that however, I need to overcome my problem with procrastination.&lt;/p&gt;

&lt;p&gt;Practically what that means is implementing the ideas from two books I bought last year:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://jamesclear.com/atomic-habits&quot;&gt;Atomic Habits&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I listened to this through audible this summer, it has great practical content, I just need to put it into practice.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.co.uk/End-Procrastination-Stop-Postponing-Fulfilled/dp/1250308054&quot;&gt;The End of Procrastination&lt;/a&gt;
&lt;img src=&quot;/DataStoryDesign/images/post_images/procrastination.jpg&quot; alt=&quot;The End of Procrastination&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Funnily enough, this book has been sitting on my desk for a few months now and I’ve just read the first chapter,
now its time to stop procrastinating on reading a book about how to stop procrastinating! :)&lt;/p&gt;

&lt;h3 id=&quot;what-does-this-all-mean-for-you&quot;&gt;What does this all mean for you?&lt;/h3&gt;

&lt;p&gt;This means you can expect to see a lot more from me as I write about things I’m learning and projects I’m working on.&lt;/p&gt;

&lt;p&gt;To start with, I’m adopting a new motto to help me overcome some perfectionistic tendencies: &lt;strong&gt;finished is better than perfect!&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">I have a problem with procrastination. More specifically, I have a problem with procrastination in my personal life. Which I find quite frustrating because I’m generally on top of things at work.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://alexfrid.github.io/DataStoryDesign/images/header_images/procrastination.jpg" /><media:content medium="image" url="https://alexfrid.github.io/DataStoryDesign/images/header_images/procrastination.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>